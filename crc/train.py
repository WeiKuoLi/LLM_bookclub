# -*- coding: utf-8 -*-
"""gpt2-fromscratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OSSjUr4NfkcqjGXuON-InsPcAlAkajfy

# Install and import required libraries
"""

#!pip install accelerate transformers einops datasets peft bitsandbytes --upgrade

import torch

import os
from datasets import load_dataset, DatasetDict

# Define the directory to save/load the datasets
#local_dataset_dir = "local_datasets"
local_dataset_dir = "/scratch365/wli22/local_datasets"

# Check if the local dataset directory exists
if os.path.exists(local_dataset_dir):
    # Load datasets from the local directory
    raw_datasets = DatasetDict.load_from_disk(local_dataset_dir)
    print("Datasets loaded from the local directory.")
else:
    # Load datasets from the Hugging Face repository
    ds_train = load_dataset("huggingface-course/codeparrot-ds-train", split="train")
    ds_valid = load_dataset("huggingface-course/codeparrot-ds-valid", split="validation")

    # Create a DatasetDict
    raw_datasets = DatasetDict(
        {
            "train": ds_train,
            "valid": ds_valid,
        }
    )

    # Save datasets to the local directory
    raw_datasets.save_to_disk(local_dataset_dir)
    print("Datasets saved to the local directory.")

# Now you have the datasets loaded into raw_datasets, whether from the local directory or Hugging Face repository.

"""# Test 1% of data"""

import random

# Get the total number of rows in the dataset
total_rows_train = len(raw_datasets['train'])
total_rows_valid = len(raw_datasets['valid'])

# Select 1% of the data randomly
#random.seed(42)  # For reproducibility, you can remove this line if you don't need reproducibility
random_indices_train = random.sample(range(total_rows_train), 3000)
random_indices_valid = random.sample(range(total_rows_valid), 300)

ds_train_1percent = raw_datasets['train'].select(random_indices_train)
ds_valid_1percent = raw_datasets['valid'].select(random_indices_valid)

# Create a DatasetDict
raw_datasets_1percent = DatasetDict(
    {
        "train": ds_train_1percent,
        "valid": ds_valid_1percent,
    }
)

"""# Tokenize data"""

from transformers import AutoTokenizer

context_length = 128
tokenizer = AutoTokenizer.from_pretrained("huggingface-course/code-search-net-tokenizer")

outputs = tokenizer(
    raw_datasets["train"][:2]["content"],
    truncation=True,
    max_length=context_length,
    return_overflowing_tokens=True,
    return_length=True,
)

print(f"Input IDs length: {len(outputs['input_ids'])}")
print(f"Input chunk lengths: {(outputs['length'])}")
print(f"Chunk mapping: {outputs['overflow_to_sample_mapping']}")

def tokenize(element):
    outputs = tokenizer(
        element["content"],
        truncation=True,
        max_length=context_length,
        return_overflowing_tokens=True,
        return_length=True,
    )
    input_batch = []
    for length, input_ids in zip(outputs["length"], outputs["input_ids"]):
        if length == context_length:
            input_batch.append(input_ids)
    return {"input_ids": input_batch}


tokenized_datasets = raw_datasets_1percent.map(
    tokenize, batched=True, remove_columns=raw_datasets_1percent["train"].column_names
)
tokenized_datasets

"""# Initialize GPT-2 model"""

from transformers import AutoModel
from transformers import AutoTokenizer, GPT2LMHeadModel, AutoConfig

# Replace 'path_to_your_model_directory' with the actual path to your model directory
model_path = "./codeparrot-ds-3000/"
if os.path.exists(model_path):
    # Load the model from the local directory
    config = AutoConfig.from_pretrained(model_path)
    model = GPT2LMHeadModel.from_pretrained(model_path)
    tokenizer = AutoTokenizer.from_pretrained(model_path)
    print('loaded pretrained model =D\n')
else:
    config = AutoConfig.from_pretrained(
        "gpt2",
        vocab_size=len(tokenizer),
        n_ctx=context_length,
        bos_token_id=tokenizer.bos_token_id,
        eos_token_id=tokenizer.eos_token_id,
    )

    model = GPT2LMHeadModel(config)

model_size = sum(t.numel() for t in model.parameters())
print(f"GPT-2 size: {model_size/1000**2:.1f}M parameters")
print(model)

"""# Data collator for Casuallm and tokenizer padding"""

from transformers import DataCollatorForLanguageModeling

tokenizer.pad_token = tokenizer.eos_token
data_collator = DataCollatorForLanguageModeling(tokenizer, mlm=False)

out = data_collator([tokenized_datasets["train"][i] for i in range(5)])
for key in out:
    print(f"{key} shape: {out[key].shape}")

"""# Start Training"""

from transformers import Trainer, TrainingArguments

args = TrainingArguments(
    output_dir=model_path,
    per_device_train_batch_size=96,
    per_device_eval_batch_size=96,
    evaluation_strategy="steps",
    eval_steps=5_0,
    logging_steps=1,
    gradient_accumulation_steps=5,
    num_train_epochs=1,
    weight_decay=0.1,
    warmup_steps=1_0,
    lr_scheduler_type="cosine",
    learning_rate=5e-4,
    save_steps=5_0,
    fp16=torch.cuda.is_available(), # True for gpu
    push_to_hub=False,
)

trainer = Trainer(
    model=model,
    tokenizer=tokenizer,
    args=args,
    data_collator=data_collator,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["valid"],
)
print("start training")
trainer.train()
model.save_pretrained(model_path)
import torch
from transformers import pipeline

device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
#pipe = pipeline(
#    "text-generation", model="huggingface-course/codeparrot-ds", device=device
#)
pipe = pipeline(
    "text-generation",tokenizer=tokenizer, model=model, device=device
)

txt = """\
# create some data
x = np.random.randn(100)
y = np.random.randn(100)

# create scatter plot with x, y
"""
print(pipe(txt, num_return_sequences=1)[0]["generated_text"])

txt = """\
# create some data
x = np.random.randn(100)
y = np.random.randn(100)

# create dataframe from x and y
"""
print(pipe(txt, num_return_sequences=1)[0]["generated_text"])

txt = """\
# dataframe with profession, income and name
df = pd.DataFrame({'profession': x, 'income':y, 'name': z})

# calculate the mean income per profession
"""
print(pipe(txt, num_return_sequences=1)[0]["generated_text"])

txt = """\
import nu
"""
print(pipe(txt, num_return_sequences=1)[0]["generated_text"])

